// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: room.proto

package room

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	pb "voice/resource/pb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RoomArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *RoomArgs) Reset() {
	*x = RoomArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_room_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomArgs) ProtoMessage() {}

func (x *RoomArgs) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomArgs.ProtoReflect.Descriptor instead.
func (*RoomArgs) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{0}
}

func (x *RoomArgs) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RoomUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //id
	RoomId        uint32 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                         //房间id
	RoomName      string `protobuf:"bytes,4,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`                    //房间名称
	Password      string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`                                    //房间密码
	UpdateTime    int64  `protobuf:"varint,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`             //修改时间
	Wheat         int32  `protobuf:"varint,10,opt,name=wheat,proto3" json:"wheat,omitempty"`                                        //1.自由上麦  2.申请上麦
	Playing       int32  `protobuf:"varint,11,opt,name=playing,proto3" json:"playing,omitempty"`                                    //玩法
	Greeting      string `protobuf:"bytes,12,opt,name=greeting,proto3" json:"greeting,omitempty"`                                   //欢迎语
	CoverPicture  string `protobuf:"bytes,13,opt,name=cover_picture,json=coverPicture,proto3" json:"cover_picture,omitempty"`       //封面图片
	IsOnline      int32  `protobuf:"varint,14,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`                  //是否在线1.否 2.是
	Popularity    int64  `protobuf:"varint,16,opt,name=popularity,proto3" json:"popularity,omitempty"`                              //人气
	Cardiac       int32  `protobuf:"varint,17,opt,name=cardiac,proto3" json:"cardiac,omitempty"`                                    //心动值开关  1.开  2.关
	BgPicture     string `protobuf:"bytes,21,opt,name=bg_picture,json=bgPicture,proto3" json:"bg_picture,omitempty"`                //背景图片
	SoundEffectId int32  `protobuf:"varint,23,opt,name=sound_effect_id,json=soundEffectId,proto3" json:"sound_effect_id,omitempty"` //房间音效
}

func (x *RoomUp) Reset() {
	*x = RoomUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_room_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomUp) ProtoMessage() {}

func (x *RoomUp) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomUp.ProtoReflect.Descriptor instead.
func (*RoomUp) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{1}
}

func (x *RoomUp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoomUp) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RoomUp) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *RoomUp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RoomUp) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *RoomUp) GetWheat() int32 {
	if x != nil {
		return x.Wheat
	}
	return 0
}

func (x *RoomUp) GetPlaying() int32 {
	if x != nil {
		return x.Playing
	}
	return 0
}

func (x *RoomUp) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *RoomUp) GetCoverPicture() string {
	if x != nil {
		return x.CoverPicture
	}
	return ""
}

func (x *RoomUp) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *RoomUp) GetPopularity() int64 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *RoomUp) GetCardiac() int32 {
	if x != nil {
		return x.Cardiac
	}
	return 0
}

func (x *RoomUp) GetBgPicture() string {
	if x != nil {
		return x.BgPicture
	}
	return ""
}

func (x *RoomUp) GetSoundEffectId() int32 {
	if x != nil {
		return x.SoundEffectId
	}
	return 0
}

type ApiRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //id
	RoomId        uint32          `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                         //房间id
	UserId        uint32          `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         //房主id
	RoomName      string          `protobuf:"bytes,4,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`                    //房间名称
	Password      string          `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`                                    //房间密码
	Wheat         int32           `protobuf:"varint,10,opt,name=wheat,proto3" json:"wheat,omitempty"`                                        //1.自由上麦  2.申请上麦
	Playing       string          `protobuf:"bytes,11,opt,name=playing,proto3" json:"playing,omitempty"`                                     //玩法
	Greeting      string          `protobuf:"bytes,12,opt,name=greeting,proto3" json:"greeting,omitempty"`                                   //欢迎语
	IsOnline      int32           `protobuf:"varint,14,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`                  //是否在线1.否 2.是
	Earnings      int32           `protobuf:"varint,15,opt,name=earnings,proto3" json:"earnings,omitempty"`                                  //收益
	Popularity    int64           `protobuf:"varint,16,opt,name=popularity,proto3" json:"popularity,omitempty"`                              //人气
	Cardiac       int32           `protobuf:"varint,17,opt,name=cardiac,proto3" json:"cardiac,omitempty"`                                    //心动值开关  1.开  2.关
	SealTime      int64           `protobuf:"varint,20,opt,name=seal_time,json=sealTime,proto3" json:"seal_time,omitempty"`                  //封禁时间
	BgPicture     string          `protobuf:"bytes,21,opt,name=bg_picture,json=bgPicture,proto3" json:"bg_picture,omitempty"`                //背景图片
	State         int32           `protobuf:"varint,22,opt,name=state,proto3" json:"state,omitempty"`                                        //状态1正常 2封禁
	SoundEffectId int32           `protobuf:"varint,23,opt,name=sound_effect_id,json=soundEffectId,proto3" json:"sound_effect_id,omitempty"` //房间音效
	MikeMap       map[int32]*Mike `protobuf:"bytes,24,rep,name=mikeMap,proto3" json:"mikeMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApiRoom) Reset() {
	*x = ApiRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_room_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiRoom) ProtoMessage() {}

func (x *ApiRoom) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiRoom.ProtoReflect.Descriptor instead.
func (*ApiRoom) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{2}
}

func (x *ApiRoom) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApiRoom) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *ApiRoom) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ApiRoom) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *ApiRoom) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ApiRoom) GetWheat() int32 {
	if x != nil {
		return x.Wheat
	}
	return 0
}

func (x *ApiRoom) GetPlaying() string {
	if x != nil {
		return x.Playing
	}
	return ""
}

func (x *ApiRoom) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *ApiRoom) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *ApiRoom) GetEarnings() int32 {
	if x != nil {
		return x.Earnings
	}
	return 0
}

func (x *ApiRoom) GetPopularity() int64 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *ApiRoom) GetCardiac() int32 {
	if x != nil {
		return x.Cardiac
	}
	return 0
}

func (x *ApiRoom) GetSealTime() int64 {
	if x != nil {
		return x.SealTime
	}
	return 0
}

func (x *ApiRoom) GetBgPicture() string {
	if x != nil {
		return x.BgPicture
	}
	return ""
}

func (x *ApiRoom) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ApiRoom) GetSoundEffectId() int32 {
	if x != nil {
		return x.SoundEffectId
	}
	return 0
}

func (x *ApiRoom) GetMikeMap() map[int32]*Mike {
	if x != nil {
		return x.MikeMap
	}
	return nil
}

type Mike struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                          //id
	RoomId  int32 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`    //房间id
	MikeNum int32 `protobuf:"varint,3,opt,name=mike_num,json=mikeNum,proto3" json:"mike_num,omitempty"` //麦位编号
	Number  int32 `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`                  //心动值数量
	IsBan   int32 `protobuf:"varint,5,opt,name=is_ban,json=isBan,proto3" json:"is_ban,omitempty"`       //是否禁用 1否 2是
	Timing  int32 `protobuf:"varint,6,opt,name=timing,proto3" json:"timing,omitempty"`                  //计时
}

func (x *Mike) Reset() {
	*x = Mike{}
	if protoimpl.UnsafeEnabled {
		mi := &file_room_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mike) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mike) ProtoMessage() {}

func (x *Mike) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mike.ProtoReflect.Descriptor instead.
func (*Mike) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{3}
}

func (x *Mike) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Mike) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Mike) GetMikeNum() int32 {
	if x != nil {
		return x.MikeNum
	}
	return 0
}

func (x *Mike) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Mike) GetIsBan() int32 {
	if x != nil {
		return x.IsBan
	}
	return 0
}

func (x *Mike) GetTiming() int32 {
	if x != nil {
		return x.Timing
	}
	return 0
}

var File_room_proto protoreflect.FileDescriptor

var file_room_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1a, 0x0a, 0x08, 0x52, 0x6f,
	0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9a, 0x03, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x55,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x68, 0x65, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x69, 0x61, 0x63, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x69, 0x61, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x67, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0xb1, 0x04, 0x0a, 0x07, 0x41, 0x70, 0x69, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68,
	0x65, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x68, 0x65, 0x61, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x69, 0x61, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x69, 0x61, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x67, 0x5f, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x67, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x69, 0x6b, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d,
	0x69, 0x6b, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x69, 0x6b,
	0x65, 0x4d, 0x61, 0x70, 0x1a, 0x41, 0x0a, 0x0c, 0x4d, 0x69, 0x6b, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4d, 0x69, 0x6b, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x04, 0x4d, 0x69, 0x6b, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6b,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6b,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73,
	0x42, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x32, 0x59, 0x0a, 0x0a, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x70, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x41, 0x70, 0x69,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x09, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x08, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x27, 0x0a,
	0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x07, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x55, 0x70, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x18, 0x5a, 0x16, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x6f, 0x6f, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_room_proto_rawDescOnce sync.Once
	file_room_proto_rawDescData = file_room_proto_rawDesc
)

func file_room_proto_rawDescGZIP() []byte {
	file_room_proto_rawDescOnce.Do(func() {
		file_room_proto_rawDescData = protoimpl.X.CompressGZIP(file_room_proto_rawDescData)
	})
	return file_room_proto_rawDescData
}

var file_room_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_room_proto_goTypes = []interface{}{
	(*RoomArgs)(nil),    // 0: RoomArgs
	(*RoomUp)(nil),      // 1: RoomUp
	(*ApiRoom)(nil),     // 2: ApiRoom
	(*Mike)(nil),        // 3: Mike
	nil,                 // 4: ApiRoom.MikeMapEntry
	(*pb.Response)(nil), // 5: common.Response
}
var file_room_proto_depIdxs = []int32{
	4, // 0: ApiRoom.mikeMap:type_name -> ApiRoom.MikeMapEntry
	3, // 1: ApiRoom.MikeMapEntry.value:type_name -> Mike
	0, // 2: RoomSpider.ApiRoomInfo:input_type -> RoomArgs
	1, // 3: RoomSpider.RoomUpdate:input_type -> RoomUp
	2, // 4: RoomSpider.ApiRoomInfo:output_type -> ApiRoom
	5, // 5: RoomSpider.RoomUpdate:output_type -> common.Response
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_room_proto_init() }
func file_room_proto_init() {
	if File_room_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_room_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_room_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_room_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_room_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mike); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_room_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_room_proto_goTypes,
		DependencyIndexes: file_room_proto_depIdxs,
		MessageInfos:      file_room_proto_msgTypes,
	}.Build()
	File_room_proto = out.File
	file_room_proto_rawDesc = nil
	file_room_proto_goTypes = nil
	file_room_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoomSpiderClient is the client API for RoomSpider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomSpiderClient interface {
	ApiRoomInfo(ctx context.Context, in *RoomArgs, opts ...grpc.CallOption) (*ApiRoom, error)
	RoomUpdate(ctx context.Context, in *RoomUp, opts ...grpc.CallOption) (*pb.Response, error)
}

type roomSpiderClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomSpiderClient(cc grpc.ClientConnInterface) RoomSpiderClient {
	return &roomSpiderClient{cc}
}

func (c *roomSpiderClient) ApiRoomInfo(ctx context.Context, in *RoomArgs, opts ...grpc.CallOption) (*ApiRoom, error) {
	out := new(ApiRoom)
	err := c.cc.Invoke(ctx, "/RoomSpider/ApiRoomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomSpiderClient) RoomUpdate(ctx context.Context, in *RoomUp, opts ...grpc.CallOption) (*pb.Response, error) {
	out := new(pb.Response)
	err := c.cc.Invoke(ctx, "/RoomSpider/RoomUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomSpiderServer is the server API for RoomSpider service.
type RoomSpiderServer interface {
	ApiRoomInfo(context.Context, *RoomArgs) (*ApiRoom, error)
	RoomUpdate(context.Context, *RoomUp) (*pb.Response, error)
}

// UnimplementedRoomSpiderServer can be embedded to have forward compatible implementations.
type UnimplementedRoomSpiderServer struct {
}

func (*UnimplementedRoomSpiderServer) ApiRoomInfo(context.Context, *RoomArgs) (*ApiRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiRoomInfo not implemented")
}
func (*UnimplementedRoomSpiderServer) RoomUpdate(context.Context, *RoomUp) (*pb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomUpdate not implemented")
}

func RegisterRoomSpiderServer(s *grpc.Server, srv RoomSpiderServer) {
	s.RegisterService(&_RoomSpider_serviceDesc, srv)
}

func _RoomSpider_ApiRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomSpiderServer).ApiRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomSpider/ApiRoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomSpiderServer).ApiRoomInfo(ctx, req.(*RoomArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomSpider_RoomUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomSpiderServer).RoomUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomSpider/RoomUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomSpiderServer).RoomUpdate(ctx, req.(*RoomUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomSpider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RoomSpider",
	HandlerType: (*RoomSpiderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiRoomInfo",
			Handler:    _RoomSpider_ApiRoomInfo_Handler,
		},
		{
			MethodName: "RoomUpdate",
			Handler:    _RoomSpider_RoomUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "room.proto",
}
